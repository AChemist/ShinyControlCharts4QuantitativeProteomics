shiny::runApp('ShinyControlCharts')
install.packages("ggplot2")
faithful[,2]
ggplot(faithful[,2]) + geom_histogram()
library(ggplot2)
ggplot(faithful[,2]) + geom_histogram()
faithful
ggplot(faithful,aes(waiting)) + geom_histogram()
ggplot(faithful,aes(waiting)) + geom_histogram(binwidth = 4)
runApp('ShinyControlCharts')
austres
airquality
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
?coord_cartesian
runApp('ShinyControlCharts')
p <- ggplot(airquality,aes(Day, Wind)) + geom_point()
p <- p + coord_cartesian(xlim = c(20, 30))
p
min(airquality$Day)
max(airquality$Day)
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
ggplot(airquality,aes(Day, Wind)) + geom_point() + coord_cartesian(xlim = c(input$integer, input$decimal))
ggplot(airquality,aes(Day, Wind)) + geom_point() + coord_cartesian(xlim = c(1, 30))
ggplot(airquality,aes(Day, Wind)) + geom_point() + coord_cartesian(xlim = c(1, 6))
runApp('ShinyControlCharts')
?airquality
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
paste(c(1,2))
paste(c(1,2), collapse = " ")
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
dat <- data.frame(proteinAccesion = c(rep("A",30),rep("B",30), peptideSequence = rep(c("ABC","CDE"),30))
)
dat
dat <- data.frame(
proteinAccesion = c(rep("A",30),rep("B",30)),
peptideSequence = rep(c("ABC","CDE"),30)
)
# Define UI for application that draws a histogram
ui <- fluidPage(# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput(
"start",
"Startdate:",
min = min(airquality$Day),
max = max(airquality$Day),
value = min(airquality$Day)
),
# Input: Simple integer interval ----
sliderInput(
"integer",
"Integer:",
min = 0,
max = 1000,
value = 500
),
# Input: Decimal interval with step value ----
sliderInput(
"decimal",
"Decimal:",
min = 0,
max = 1,
value = 0.5,
step = 0.1
),
# Input: Specification of range within an interval ----
sliderInput(
"range",
"Range:",
min = min(airquality$Day),
max = max(airquality$Day),
value = c(min(airquality$Day), max(airquality$Day))
)
),
# Show a plot of the generated distribution
mainPanel(plotOutput("distPlot"))))
# Define server logic required to draw a histogram
server <- function(input, output){
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse = " "),
input$format,
input$animation)),
stringsAsFactors = FALSE)
})
output$distPlot <- renderPlot({
# draw the histogram with the specified number of bins
#hist(x, breaks = bins, col = 'darkgray', border = 'white')
ggplot(airquality,aes(Day, Wind)) + geom_point() + coord_cartesian(xlim = c(input$range[1], input$range[2]))
})
}
dat
dat <- data.frame(
proteinAccesion = c(rep("A",30),rep("B",30)),
peptideSequence = rep(c(rep(c("ABC",15)), rep("CDE",15)),2)
)
dat <- data.frame(
proteinAccesion = c(rep("A",30),rep("B",30)),
peptideSequence = rep(c(rep("ABC",15), rep("CDE",15)),2)
)
dat
dat <- data.frame(
proteinAccesion = c(rep("A",30),rep("B",30)),
peptideSequence = rep(c(rep("ABC",15), rep("CDE",15)),2),
time = rep(1:15,4)
)
dat
?set.seed
dat <- data.frame(
proteinAccesion = c(rep("A",30),rep("B",30)),
peptideSequence = rep(c(rep("ABC",15), rep("CDE",15)),2),
time = rep(1:15,4),
value = runif(60)
)
dat
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('test')
source('test/app.R')
install.packages("DT")
source('test/app.R')
dat$ProtPep <- paste(dat$proteinAccesion, dat$peptideSequence)
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('test3')
runApp('test3')
runApp('ShinyControlCharts')
dat <- data.frame(
proteinAccesion = c(rep("A",60),rep("B",60)),
peptideSequence = rep(c(rep("ABC",30), rep("CDE",30)),2),
Transition = rep(c(rep("ABC 2+ -> xyz",30), rep("CDE  2+ -> xyz",30)),2),
time = rep(1:30,4),
value = runif(120)
)
dat$ProtPep <- paste(dat$proteinAccesion, dat$peptideSequence)
runApp('ShinyControlCharts')
View(dat)
dat <- data.frame(
proteinAccesion = c(rep("A",60),rep("B",60)),
peptideSequence = rep(c(rep("ABC",30), rep("CDE",30)),2),
Transition = rep(c("A","B","C","D"),30),
time = rep(1:30,4),
value = runif(120)
)
dat$Transition <- paste0(dat$proteinAccesion,"_",dat$peptideSequence," -> ",dat$Transition )
dat$ProtPep <- paste(dat$proteinAccesion, dat$peptideSequence)
View(dat)
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
install.packages("plyr")
install.packages("plyr")
shiny::runApp()
runApp()
library(plyr)
library(plyr)
install.packages("dplyr")
library(dplyr)
install.packages("plyr")
library(plyr)
shiny::runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
dat <- data.frame(
proteinAccesion = c(rep("A",60),rep("B",60)),
peptideSequence = rep(c(rep("ABC",30), rep("CDE",30)),2),
Transition = rep(c("A","B","C","D"),30),
time = rep(1:30,4),
value = runif(120)
)
dat$Transition <- paste0(dat$proteinAccesion,"_",dat$peptideSequence," -> ",dat$Transition )
dat$ProtPep <- paste(dat$proteinAccesion, dat$peptideSequence)
ddply(dat[dat$ProtPep == input$ProtPep,], (Transition), function(dsub, input){
renderPlot(
# draw the histogram with the specified number of bins
#hist(x, breaks = bins, col = 'darkgray', border = 'white')
ggplot(dsub ,aes(time, value)) + geom_point() #+ coord_cartesian(xlim = c(input$range[1], input$range[2]))
)
}, input)
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
unique(dat$Transition)
?uiOutput()
?uiOutput()
?renderUI
?mainPanel()
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
runApp('ShinyControlCharts')
